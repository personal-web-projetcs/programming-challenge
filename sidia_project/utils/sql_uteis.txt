SELECT
   *
FROM
   pg_catalog.pg_tables
WHERE
   schemaname != 'pg_catalog'
AND schemaname != 'information_schema';

ALTER TABLE <tablename> OWNER TO <username>

select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = 'tbl_title'

select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = 'tbl_actor'

select column_name, data_type, character_maximum_length
from INFORMATION_SCHEMA.COLUMNS where table_name = 'tbl_rating'

SELECT * FROM tbl_title

SELECT * FROM tbl_actor

DELETE FROM tbl_title WHERE tbl_title.tconst <> ''

DELETE FROM tbl_actor WHERE tbl_actor.nconst <> ''

UPDATE dummy
SET customer=subquery.customer,
    address=subquery.address,
    partn=subquery.partn
FROM (SELECT address_id, customer, address, partn
      FROM  /* big hairy SQL */ ...) AS subquery
WHERE dummy.address_id=subquery.address_id;


WITH subquery AS (
    SELECT address_id, customer, address, partn
    FROM  /* big hairy SQL */ ...
)
UPDATE dummy
SET customer = subquery.customer,
    address  = subquery.address,
    partn    = subquery.partn
FROM subquery
WHERE dummy.address_id = subquery.address_id;

CREATE TABLE tbl_rating_temp (
    user_id serial PRIMARY KEY,
    tconst VARCHAR (20),
    average_rating DOUBLE PRECISION,
    num_votes INTEGER,
)

CREATE TABLE tbl_title_actor_temp (
    uid serial PRIMARY KEY,
    tconst VARCHAR (20),
	nconst VARCHAR (20)
)

CREATE TABLE tbl_title_temp (
    uid serial PRIMARY KEY,
    tconst VARCHAR (20),
	is_adult BOOLEAN
)

ALTER TABLE tbl_title_actor_temp OWNER TO djangoapp

INSERT INTO tbl_rating
   SELECT title_id, average_rating, num_votes
   FROM  tbl_title INNER JOIN tbl_rating_temp ON tbl_title.tconst=tbl_rating_temp.tconst
   WHERE tbl_title.tconst <> ''

INSERT INTO tbl_title_actor
SELECT uid, title_id, actor_id
FROM  tbl_title_actor_temp INNER JOIN tbl_title ON tbl_title_actor_temp.tconst=tbl_title.tconst
INNER JOIN tbl_actor ON tbl_actor.nconst=tbl_title_actor_temp.nconst
WHERE tbl_title.title_id IS NOT NULL AND tbl_actor.actor_id IS NOT NULL

UPDATE tbl_title
SET is_adult = tbl_title_temp.is_adult
from tbl_title_temp 
where tbl_title.tconst = tbl_title_temp.tconst

SELECT title_type, COUNT(title_id) FROM tbl_title GROUP BY title_type

Complete: select count(*) from tbl_title inner join tbl_rating on tbl_title.title_id=tbl_rating.title_id_id
where tbl_title.start_year is not null and tbl_title.end_year is not null and tbl_title.runtime_minutes is not null
and tbl_title.genres is not null and tbl_rating.average_rating is not null and tbl_rating.num_votes is not null

Table dashboard: 
   SELECT
      tbl_title.title_type,
      COUNT(title_id),
	  s.maxavg,
	  t.minavg,
	  avgc,
	  u.cad
    FROM
      tbl_title
	INNER JOIN 
     (
      SELECT title_type, COUNT(is_adult) AS cad FROM tbl_title WHERE is_adult=true GROUP BY title_type) u 	 
	ON tbl_title.title_type=u.title_type 
    INNER JOIN
     (
      SELECT tbl_title.title_type, MAX(tbl_rating.average_rating) AS maxavg FROM tbl_title
		 inner join tbl_rating on tbl_title.title_id=tbl_rating.title_id_id GROUP BY tbl_title.title_type ) s 
    ON tbl_title.title_type=s.title_type  
	 INNER JOIN 
     (
      SELECT tbl_title.title_type, MIN(tbl_rating.average_rating) AS minavg FROM tbl_title
		 inner join tbl_rating on tbl_title.title_id=tbl_rating.title_id_id GROUP BY tbl_title.title_type ) t 
	ON tbl_title.title_type=t.title_type
	INNER JOIN
	(
		SELECT tbl_title.title_type, ROUND(AVG(tbl_rating.average_rating)::numeric,2) AS avgc FROM tbl_title
		 inner join tbl_rating on tbl_title.title_id=tbl_rating.title_id_id GROUP BY tbl_title.title_type
	) w
	ON tbl_title.title_type=w.title_type 
	 
	GROUP BY tbl_title.title_type, s.maxavg, t.minavg, u.cad, w.avgc